define(['dart_sdk', 'packages/collection/src/queue_list.dart', 'packages/yaml/src/token.dart', 'packages/string_scanner/src/relative_span_scanner.dart', 'packages/yaml/src/yaml_exception.dart', 'packages/source_span/src/location_mixin.dart', 'packages/yaml/src/utils.dart', 'packages/yaml/src/style.dart', 'packages/string_scanner/src/line_scanner.dart', 'packages/yaml/src/error_listener.dart'], (function load__packages__yaml__src__scanner_dart(dart_sdk, packages__collection__src__queue_list$46dart, packages__yaml__src__token$46dart, packages__string_scanner__src__relative_span_scanner$46dart, packages__yaml__src__yaml_exception$46dart, packages__source_span__src__location_mixin$46dart, packages__yaml__src__utils$46dart, packages__yaml__src__style$46dart, packages__string_scanner__src__line_scanner$46dart, packages__yaml__src__error_listener$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const queue_list = packages__collection__src__queue_list$46dart.src__queue_list;
  const token$ = packages__yaml__src__token$46dart.src__token;
  const eager_span_scanner = packages__string_scanner__src__relative_span_scanner$46dart.src__eager_span_scanner;
  const span_scanner = packages__string_scanner__src__relative_span_scanner$46dart.src__span_scanner;
  const yaml_exception = packages__yaml__src__yaml_exception$46dart.src__yaml_exception;
  const file = packages__source_span__src__location_mixin$46dart.src__file;
  const location = packages__source_span__src__location_mixin$46dart.src__location;
  const utils = packages__yaml__src__utils$46dart.src__utils;
  const style = packages__yaml__src__style$46dart.src__style;
  const line_scanner = packages__string_scanner__src__line_scanner$46dart.src__line_scanner;
  const error_listener = packages__yaml__src__error_listener$46dart.src__error_listener;
  var scanner = Object.create(dart.library);
  var $last = dartx.last;
  var $length = dartx.length;
  var $any = dartx.any;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $removeLast = dartx.removeLast;
  var $isEmpty = dartx.isEmpty;
  var $startsWith = dartx.startsWith;
  var $endsWith = dartx.endsWith;
  var $substring = dartx.substring;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    QueueListOfToken: () => (T.QueueListOfToken = dart.constFn(queue_list.QueueList$(token$.Token)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    _SimpleKeyN: () => (T._SimpleKeyN = dart.constFn(dart.nullable(scanner._SimpleKey)))(),
    JSArrayOf_SimpleKeyN: () => (T.JSArrayOf_SimpleKeyN = dart.constFn(_interceptors.JSArray$(T._SimpleKeyN())))(),
    _SimpleKeyNTobool: () => (T._SimpleKeyNTobool = dart.constFn(dart.fnType(core.bool, [T._SimpleKeyN()])))(),
    PairOfint$String: () => (T.PairOfint$String = dart.constFn(utils.Pair$(core.int, core.String)))(),
    _ChompingL: () => (T._ChompingL = dart.constFn(dart.legacy(scanner._Chomping)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: scanner._Chomping.prototype,
        [_name$]: "_Chomping.strip",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: scanner._Chomping.prototype,
        [_name$]: "_Chomping.clip",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: scanner._Chomping.prototype,
        [_name$]: "_Chomping.keep",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T._ChompingL());
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///d:/flutter/.pub-cache/hosted/pub.flutter-io.cn/yaml-3.1.0/lib/src/scanner.dart",
    "package:yaml/src/scanner.dart"
  ];
  var _streamStartProduced = dart.privateName(scanner, "_streamStartProduced");
  var _streamEndProduced = dart.privateName(scanner, "_streamEndProduced");
  var _tokens = dart.privateName(scanner, "_tokens");
  var _tokensParsed = dart.privateName(scanner, "_tokensParsed");
  var _tokenAvailable = dart.privateName(scanner, "_tokenAvailable");
  var _indents = dart.privateName(scanner, "_indents");
  var _simpleKeyAllowed = dart.privateName(scanner, "_simpleKeyAllowed");
  var _simpleKeys = dart.privateName(scanner, "_simpleKeys");
  var _recover = dart.privateName(scanner, "_recover");
  var _errorListener = dart.privateName(scanner, "_errorListener");
  var _scanner = dart.privateName(scanner, "_scanner");
  var _indent = dart.privateName(scanner, "_indent");
  var _inBlockContext = dart.privateName(scanner, "_inBlockContext");
  var _isBreak = dart.privateName(scanner, "_isBreak");
  var _isBreakOrEnd = dart.privateName(scanner, "_isBreakOrEnd");
  var _isBreakAt = dart.privateName(scanner, "_isBreakAt");
  var _isBlankOrEndAt = dart.privateName(scanner, "_isBlankOrEndAt");
  var _isBlankOrEnd = dart.privateName(scanner, "_isBlankOrEnd");
  var _isBlankAt = dart.privateName(scanner, "_isBlankAt");
  var _isBlank = dart.privateName(scanner, "_isBlank");
  var _isTagChar = dart.privateName(scanner, "_isTagChar");
  var _isNonSpace = dart.privateName(scanner, "_isNonSpace");
  var _isAnchorChar = dart.privateName(scanner, "_isAnchorChar");
  var _isDigit = dart.privateName(scanner, "_isDigit");
  var _isHex = dart.privateName(scanner, "_isHex");
  var _isPlainCharAt = dart.privateName(scanner, "_isPlainCharAt");
  var _isPlainChar = dart.privateName(scanner, "_isPlainChar");
  var _isNonBreak = dart.privateName(scanner, "_isNonBreak");
  var _isDocumentIndicator = dart.privateName(scanner, "_isDocumentIndicator");
  var _fetchMoreTokens = dart.privateName(scanner, "_fetchMoreTokens");
  var _staleSimpleKeys = dart.privateName(scanner, "_staleSimpleKeys");
  var _fetchNextToken = dart.privateName(scanner, "_fetchNextToken");
  var _fetchStreamStart = dart.privateName(scanner, "_fetchStreamStart");
  var _scanToNextToken = dart.privateName(scanner, "_scanToNextToken");
  var _unrollIndent = dart.privateName(scanner, "_unrollIndent");
  var _fetchStreamEnd = dart.privateName(scanner, "_fetchStreamEnd");
  var _fetchDirective = dart.privateName(scanner, "_fetchDirective");
  var _fetchDocumentIndicator = dart.privateName(scanner, "_fetchDocumentIndicator");
  var _fetchFlowCollectionStart = dart.privateName(scanner, "_fetchFlowCollectionStart");
  var _fetchFlowCollectionEnd = dart.privateName(scanner, "_fetchFlowCollectionEnd");
  var _fetchFlowEntry = dart.privateName(scanner, "_fetchFlowEntry");
  var _fetchAnchor = dart.privateName(scanner, "_fetchAnchor");
  var _fetchTag = dart.privateName(scanner, "_fetchTag");
  var _fetchFlowScalar = dart.privateName(scanner, "_fetchFlowScalar");
  var _invalidScalarCharacter = dart.privateName(scanner, "_invalidScalarCharacter");
  var _fetchBlockScalar = dart.privateName(scanner, "_fetchBlockScalar");
  var _fetchPlainScalar = dart.privateName(scanner, "_fetchPlainScalar");
  var _fetchBlockEntry = dart.privateName(scanner, "_fetchBlockEntry");
  var _fetchKey = dart.privateName(scanner, "_fetchKey");
  var _fetchValue = dart.privateName(scanner, "_fetchValue");
  var _reportError = dart.privateName(scanner, "_reportError");
  var _removeSimpleKey = dart.privateName(scanner, "_removeSimpleKey");
  var _saveSimpleKey = dart.privateName(scanner, "_saveSimpleKey");
  var _increaseFlowLevel = dart.privateName(scanner, "_increaseFlowLevel");
  var _decreaseFlowLevel = dart.privateName(scanner, "_decreaseFlowLevel");
  var _rollIndent = dart.privateName(scanner, "_rollIndent");
  var _resetIndent = dart.privateName(scanner, "_resetIndent");
  var _scanDirective = dart.privateName(scanner, "_scanDirective");
  var _addCharToken = dart.privateName(scanner, "_addCharToken");
  var _scanAnchor = dart.privateName(scanner, "_scanAnchor");
  var _scanTag = dart.privateName(scanner, "_scanTag");
  var _scanBlockScalar = dart.privateName(scanner, "_scanBlockScalar");
  var _scanFlowScalar = dart.privateName(scanner, "_scanFlowScalar");
  var _scanPlainScalar = dart.privateName(scanner, "_scanPlainScalar");
  var _skipComment = dart.privateName(scanner, "_skipComment");
  var _skipLine = dart.privateName(scanner, "_skipLine");
  var _scanDirectiveName = dart.privateName(scanner, "_scanDirectiveName");
  var _scanVersionDirectiveValue = dart.privateName(scanner, "_scanVersionDirectiveValue");
  var _scanTagDirectiveValue = dart.privateName(scanner, "_scanTagDirectiveValue");
  var _skipBlanks = dart.privateName(scanner, "_skipBlanks");
  var _scanVersionDirectiveNumber = dart.privateName(scanner, "_scanVersionDirectiveNumber");
  var _scanTagHandle = dart.privateName(scanner, "_scanTagHandle");
  var _scanTagUri = dart.privateName(scanner, "_scanTagUri");
  var _scanBlockScalarBreaks = dart.privateName(scanner, "_scanBlockScalarBreaks");
  var _readLine = dart.privateName(scanner, "_readLine");
  var _asHex = dart.privateName(scanner, "_asHex");
  var _isPlainSafeAt = dart.privateName(scanner, "_isPlainSafeAt");
  scanner.Scanner = class Scanner extends core.Object {
    get [_indent]() {
      return this[_indents][$last];
    }
    get [_inBlockContext]() {
      return this[_simpleKeys][$length] === 1;
    }
    get [_isBreakOrEnd]() {
      return dart.test(this[_scanner].isDone) || dart.test(this[_isBreak]);
    }
    get [_isBreak]() {
      return this[_isBreakAt](0);
    }
    get [_isBlankOrEnd]() {
      return this[_isBlankOrEndAt](0);
    }
    get [_isBlank]() {
      return this[_isBlankAt](0);
    }
    get [_isTagChar]() {
      let char = this[_scanner].peekChar();
      if (char == null) return false;
      switch (char) {
        case 45:
        case 59:
        case 47:
        case 58:
        case 64:
        case 38:
        case 61:
        case 43:
        case 36:
        case 46:
        case 126:
        case 63:
        case 42:
        case 39:
        case 40:
        case 41:
        case 37:
        {
          return true;
        }
        default:
        {
          return dart.notNull(char) >= 48 && dart.notNull(char) <= 57 || dart.notNull(char) >= 97 && dart.notNull(char) <= 122 || dart.notNull(char) >= 65 && dart.notNull(char) <= 90;
        }
      }
    }
    get [_isAnchorChar]() {
      if (!dart.test(this[_isNonSpace])) return false;
      switch (this[_scanner].peekChar()) {
        case 44:
        case 91:
        case 93:
        case 123:
        case 125:
        {
          return false;
        }
        default:
        {
          return true;
        }
      }
    }
    get [_isDigit]() {
      let char = this[_scanner].peekChar();
      return char != null && dart.notNull(char) >= 48 && dart.notNull(char) <= 57;
    }
    get [_isHex]() {
      let char = this[_scanner].peekChar();
      if (char == null) return false;
      return dart.notNull(char) >= 48 && dart.notNull(char) <= 57 || dart.notNull(char) >= 97 && dart.notNull(char) <= 102 || dart.notNull(char) >= 65 && dart.notNull(char) <= 70;
    }
    get [_isPlainChar]() {
      return this[_isPlainCharAt](0);
    }
    get [_isNonBreak]() {
      let char = this[_scanner].peekChar();
      if (char == null) return false;
      switch (char) {
        case 10:
        case 13:
        case 65279:
        {
          return false;
        }
        case 9:
        case 133:
        {
          return true;
        }
        default:
        {
          return dart.notNull(char) >= 32 && dart.notNull(char) <= 126 || dart.notNull(char) >= 160 && dart.notNull(char) <= 55295 || dart.notNull(char) >= 57344 && dart.notNull(char) <= 65533 || dart.notNull(char) >= 65536 && dart.notNull(char) <= 1114111;
        }
      }
    }
    get [_isNonSpace]() {
      let char = this[_scanner].peekChar();
      if (char == null) return false;
      switch (char) {
        case 10:
        case 13:
        case 65279:
        case 32:
        {
          return false;
        }
        case 133:
        {
          return true;
        }
        default:
        {
          return dart.notNull(char) >= 32 && dart.notNull(char) <= 126 || dart.notNull(char) >= 160 && dart.notNull(char) <= 55295 || dart.notNull(char) >= 57344 && dart.notNull(char) <= 65533 || dart.notNull(char) >= 65536 && dart.notNull(char) <= 1114111;
        }
      }
    }
    get [_isDocumentIndicator]() {
      return this[_scanner].column === 0 && dart.test(this[_isBlankOrEndAt](3)) && (dart.test(this[_scanner].matches("---")) || dart.test(this[_scanner].matches("...")));
    }
    scan() {
      if (dart.test(this[_streamEndProduced])) dart.throw(new core.StateError.new("Out of tokens."));
      if (!dart.test(this[_tokenAvailable])) this[_fetchMoreTokens]();
      let token = this[_tokens].removeFirst();
      this[_tokenAvailable] = false;
      this[_tokensParsed] = dart.notNull(this[_tokensParsed]) + 1;
      this[_streamEndProduced] = token$.Token.is(token) && token.type == token$.TokenType.streamEnd;
      return token;
    }
    advance() {
      this.scan();
      return this.peek();
    }
    peek() {
      if (dart.test(this[_streamEndProduced])) return null;
      if (!dart.test(this[_tokenAvailable])) this[_fetchMoreTokens]();
      return this[_tokens].first;
    }
    [_fetchMoreTokens]() {
      while (true) {
        if (dart.test(this[_tokens].isNotEmpty)) {
          this[_staleSimpleKeys]();
          if (this[_tokens].last.type == token$.TokenType.streamEnd) break;
          if (!dart.test(this[_simpleKeys][$any](dart.fn(key => key != null && key.tokenNumber == this[_tokensParsed], T._SimpleKeyNTobool())))) {
            break;
          }
        }
        this[_fetchNextToken]();
      }
      this[_tokenAvailable] = true;
    }
    [_fetchNextToken]() {
      if (!dart.test(this[_streamStartProduced])) {
        this[_fetchStreamStart]();
        return;
      }
      this[_scanToNextToken]();
      this[_staleSimpleKeys]();
      this[_unrollIndent](this[_scanner].column);
      if (dart.test(this[_scanner].isDone)) {
        this[_fetchStreamEnd]();
        return;
      }
      if (this[_scanner].column === 0) {
        if (this[_scanner].peekChar() === 37) {
          this[_fetchDirective]();
          return;
        }
        if (dart.test(this[_isBlankOrEndAt](3))) {
          if (dart.test(this[_scanner].matches("---"))) {
            this[_fetchDocumentIndicator](token$.TokenType.documentStart);
            return;
          }
          if (dart.test(this[_scanner].matches("..."))) {
            this[_fetchDocumentIndicator](token$.TokenType.documentEnd);
            return;
          }
        }
      }
      switch (this[_scanner].peekChar()) {
        case 91:
        {
          this[_fetchFlowCollectionStart](token$.TokenType.flowSequenceStart);
          return;
        }
        case 123:
        {
          this[_fetchFlowCollectionStart](token$.TokenType.flowMappingStart);
          return;
        }
        case 93:
        {
          this[_fetchFlowCollectionEnd](token$.TokenType.flowSequenceEnd);
          return;
        }
        case 125:
        {
          this[_fetchFlowCollectionEnd](token$.TokenType.flowMappingEnd);
          return;
        }
        case 44:
        {
          this[_fetchFlowEntry]();
          return;
        }
        case 42:
        {
          this[_fetchAnchor]({anchor: false});
          return;
        }
        case 38:
        {
          this[_fetchAnchor]({anchor: true});
          return;
        }
        case 33:
        {
          this[_fetchTag]();
          return;
        }
        case 39:
        {
          this[_fetchFlowScalar]({singleQuote: true});
          return;
        }
        case 34:
        {
          this[_fetchFlowScalar]({singleQuote: false});
          return;
        }
        case 124:
        {
          if (!dart.test(this[_inBlockContext])) this[_invalidScalarCharacter]();
          this[_fetchBlockScalar]({literal: true});
          return;
        }
        case 62:
        {
          if (!dart.test(this[_inBlockContext])) this[_invalidScalarCharacter]();
          this[_fetchBlockScalar]({literal: false});
          return;
        }
        case 37:
        case 64:
        case 96:
        {
          this[_invalidScalarCharacter]();
          return;
        }
        case 45:
        {
          if (dart.test(this[_isPlainCharAt](1))) {
            this[_fetchPlainScalar]();
          } else {
            this[_fetchBlockEntry]();
          }
          return;
        }
        case 63:
        {
          if (dart.test(this[_isPlainCharAt](1))) {
            this[_fetchPlainScalar]();
          } else {
            this[_fetchKey]();
          }
          return;
        }
        case 58:
        {
          if (!dart.test(this[_inBlockContext]) && dart.test(this[_tokens].isNotEmpty)) {
            let token = this[_tokens].last;
            if (token.type == token$.TokenType.flowSequenceEnd || token.type == token$.TokenType.flowMappingEnd || token.type == token$.TokenType.scalar && dart.test(token$.ScalarToken.as(token).style.isQuoted)) {
              this[_fetchValue]();
              return;
            }
          }
          if (dart.test(this[_isPlainCharAt](1))) {
            this[_fetchPlainScalar]();
          } else {
            this[_fetchValue]();
          }
          return;
        }
        default:
        {
          if (!dart.test(this[_isNonBreak])) this[_invalidScalarCharacter]();
          this[_fetchPlainScalar]();
          return;
        }
      }
    }
    [_invalidScalarCharacter]() {
      this[_scanner].error("Unexpected character.", {length: 1});
      return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
    }
    [_staleSimpleKeys]() {
      for (let i = 0; i < dart.notNull(this[_simpleKeys][$length]); i = i + 1) {
        let key = this[_simpleKeys][$_get](i);
        if (key == null) continue;
        if (!dart.test(this[_inBlockContext])) continue;
        if (key.line == this[_scanner].line) continue;
        if (dart.test(key.required)) {
          this[_reportError](new yaml_exception.YamlException.new("Expected ':'.", this[_scanner].emptySpan));
          this[_tokens].insert(dart.notNull(key.tokenNumber) - dart.notNull(this[_tokensParsed]), new token$.Token.new(token$.TokenType.key, file.FileSpan.as(key.location.pointSpan())));
        }
        this[_simpleKeys][$_set](i, null);
      }
    }
    [_saveSimpleKey]() {
      let required = dart.test(this[_inBlockContext]) && this[_indent] == this[_scanner].column;
      if (!(dart.test(this[_simpleKeyAllowed]) || !required)) dart.assertFailed(null, I[0], 518, 12, "_simpleKeyAllowed || !required");
      if (!dart.test(this[_simpleKeyAllowed])) return;
      this[_removeSimpleKey]();
      this[_simpleKeys][$_set](dart.notNull(this[_simpleKeys][$length]) - 1, new scanner._SimpleKey.new(dart.notNull(this[_tokensParsed]) + dart.notNull(this[_tokens].length), this[_scanner].line, this[_scanner].column, this[_scanner].location, {required: required}));
    }
    [_removeSimpleKey]() {
      let key = this[_simpleKeys][$last];
      if (key != null && dart.test(key.required)) {
        dart.throw(new yaml_exception.YamlException.new("Could not find expected ':' for simple key.", key.location.pointSpan()));
      }
      this[_simpleKeys][$_set](dart.notNull(this[_simpleKeys][$length]) - 1, null);
    }
    [_increaseFlowLevel]() {
      this[_simpleKeys][$add](null);
    }
    [_decreaseFlowLevel]() {
      if (dart.test(this[_inBlockContext])) return;
      this[_simpleKeys][$removeLast]();
    }
    [_rollIndent](column, type, location, opts) {
      if (column == null) dart.nullFailed(I[0], 560, 24, "column");
      if (type == null) dart.nullFailed(I[0], 560, 42, "type");
      if (location == null) dart.nullFailed(I[0], 560, 63, "location");
      let tokenNumber = opts && 'tokenNumber' in opts ? opts.tokenNumber : null;
      if (!dart.test(this[_inBlockContext])) return;
      if (this[_indent] !== -1 && dart.notNull(this[_indent]) >= dart.notNull(column)) return;
      this[_indents][$add](column);
      let token = new token$.Token.new(type, file.FileSpan.as(location.pointSpan()));
      if (tokenNumber == null) {
        this[_tokens].add(token);
      } else {
        this[_tokens].insert(dart.notNull(tokenNumber) - dart.notNull(this[_tokensParsed]), token);
      }
    }
    [_unrollIndent](column) {
      if (column == null) dart.nullFailed(I[0], 582, 26, "column");
      if (!dart.test(this[_inBlockContext])) return;
      while (dart.notNull(this[_indent]) > dart.notNull(column)) {
        this[_tokens].add(new token$.Token.new(token$.TokenType.blockEnd, this[_scanner].emptySpan));
        this[_indents][$removeLast]();
      }
    }
    [_resetIndent]() {
      return this[_unrollIndent](-1);
    }
    [_fetchStreamStart]() {
      this[_streamStartProduced] = true;
      this[_tokens].add(new token$.Token.new(token$.TokenType.streamStart, this[_scanner].emptySpan));
    }
    [_fetchStreamEnd]() {
      this[_resetIndent]();
      this[_removeSimpleKey]();
      this[_simpleKeyAllowed] = false;
      this[_tokens].add(new token$.Token.new(token$.TokenType.streamEnd, this[_scanner].emptySpan));
    }
    [_fetchDirective]() {
      this[_resetIndent]();
      this[_removeSimpleKey]();
      this[_simpleKeyAllowed] = false;
      let directive = this[_scanDirective]();
      if (directive != null) this[_tokens].add(directive);
    }
    [_fetchDocumentIndicator](type) {
      if (type == null) dart.nullFailed(I[0], 624, 42, "type");
      this[_resetIndent]();
      this[_removeSimpleKey]();
      this[_simpleKeyAllowed] = false;
      let start = this[_scanner].state;
      this[_scanner].readChar();
      this[_scanner].readChar();
      this[_scanner].readChar();
      this[_tokens].add(new token$.Token.new(type, this[_scanner].spanFrom(start)));
    }
    [_fetchFlowCollectionStart](type) {
      if (type == null) dart.nullFailed(I[0], 640, 44, "type");
      this[_saveSimpleKey]();
      this[_increaseFlowLevel]();
      this[_simpleKeyAllowed] = true;
      this[_addCharToken](type);
    }
    [_fetchFlowCollectionEnd](type) {
      if (type == null) dart.nullFailed(I[0], 649, 42, "type");
      this[_removeSimpleKey]();
      this[_decreaseFlowLevel]();
      this[_simpleKeyAllowed] = false;
      this[_addCharToken](type);
    }
    [_fetchFlowEntry]() {
      this[_removeSimpleKey]();
      this[_simpleKeyAllowed] = true;
      this[_addCharToken](token$.TokenType.flowEntry);
    }
    [_fetchBlockEntry]() {
      if (dart.test(this[_inBlockContext])) {
        if (!dart.test(this[_simpleKeyAllowed])) {
          dart.throw(new yaml_exception.YamlException.new("Block sequence entries are not allowed here.", this[_scanner].emptySpan));
        }
        this[_rollIndent](this[_scanner].column, token$.TokenType.blockSequenceStart, this[_scanner].location);
      } else {
      }
      this[_removeSimpleKey]();
      this[_simpleKeyAllowed] = true;
      this[_addCharToken](token$.TokenType.blockEntry);
    }
    [_fetchKey]() {
      if (dart.test(this[_inBlockContext])) {
        if (!dart.test(this[_simpleKeyAllowed])) {
          dart.throw(new yaml_exception.YamlException.new("Mapping keys are not allowed here.", this[_scanner].emptySpan));
        }
        this[_rollIndent](this[_scanner].column, token$.TokenType.blockMappingStart, this[_scanner].location);
      }
      this[_simpleKeyAllowed] = this[_inBlockContext];
      this[_addCharToken](token$.TokenType.key);
    }
    [_fetchValue]() {
      let simpleKey = this[_simpleKeys][$last];
      if (simpleKey != null) {
        this[_tokens].insert(dart.notNull(simpleKey.tokenNumber) - dart.notNull(this[_tokensParsed]), new token$.Token.new(token$.TokenType.key, file.FileSpan.as(simpleKey.location.pointSpan())));
        this[_rollIndent](simpleKey.column, token$.TokenType.blockMappingStart, simpleKey.location, {tokenNumber: simpleKey.tokenNumber});
        this[_simpleKeys][$_set](dart.notNull(this[_simpleKeys][$length]) - 1, null);
        this[_simpleKeyAllowed] = false;
      } else if (dart.test(this[_inBlockContext])) {
        if (!dart.test(this[_simpleKeyAllowed])) {
          dart.throw(new yaml_exception.YamlException.new("Mapping values are not allowed here. Did you miss a colon " + "earlier?", this[_scanner].emptySpan));
        }
        this[_rollIndent](this[_scanner].column, token$.TokenType.blockMappingStart, this[_scanner].location);
        this[_simpleKeyAllowed] = true;
      } else if (dart.test(this[_simpleKeyAllowed])) {
        this[_simpleKeyAllowed] = false;
        this[_addCharToken](token$.TokenType.key);
      }
      this[_addCharToken](token$.TokenType.value);
    }
    [_addCharToken](type) {
      if (type == null) dart.nullFailed(I[0], 747, 32, "type");
      let start = this[_scanner].state;
      this[_scanner].readChar();
      this[_tokens].add(new token$.Token.new(type, this[_scanner].spanFrom(start)));
    }
    [_fetchAnchor](opts) {
      let anchor = opts && 'anchor' in opts ? opts.anchor : true;
      if (anchor == null) dart.nullFailed(I[0], 754, 27, "anchor");
      this[_saveSimpleKey]();
      this[_simpleKeyAllowed] = false;
      this[_tokens].add(this[_scanAnchor]({anchor: anchor}));
    }
    [_fetchTag]() {
      this[_saveSimpleKey]();
      this[_simpleKeyAllowed] = false;
      this[_tokens].add(this[_scanTag]());
    }
    [_fetchBlockScalar](opts) {
      let literal = opts && 'literal' in opts ? opts.literal : false;
      if (literal == null) dart.nullFailed(I[0], 769, 32, "literal");
      this[_removeSimpleKey]();
      this[_simpleKeyAllowed] = true;
      this[_tokens].add(this[_scanBlockScalar]({literal: literal}));
    }
    [_fetchFlowScalar](opts) {
      let singleQuote = opts && 'singleQuote' in opts ? opts.singleQuote : false;
      if (singleQuote == null) dart.nullFailed(I[0], 777, 31, "singleQuote");
      this[_saveSimpleKey]();
      this[_simpleKeyAllowed] = false;
      this[_tokens].add(this[_scanFlowScalar]({singleQuote: singleQuote}));
    }
    [_fetchPlainScalar]() {
      this[_saveSimpleKey]();
      this[_simpleKeyAllowed] = false;
      this[_tokens].add(this[_scanPlainScalar]());
    }
    [_scanToNextToken]() {
      let afterLineBreak = false;
      while (true) {
        if (this[_scanner].column === 0) this[_scanner].scan("﻿");
        while (this[_scanner].peekChar() === 32 || (!dart.test(this[_inBlockContext]) || !afterLineBreak) && this[_scanner].peekChar() === 9) {
          this[_scanner].readChar();
        }
        if (this[_scanner].peekChar() === 9) {
          this[_scanner].error("Tab characters are not allowed as indentation.", {length: 1});
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
        }
        this[_skipComment]();
        if (dart.test(this[_isBreak])) {
          this[_skipLine]();
          if (dart.test(this[_inBlockContext])) this[_simpleKeyAllowed] = true;
          afterLineBreak = true;
        } else {
          break;
        }
      }
    }
    [_scanDirective]() {
      let start = this[_scanner].state;
      this[_scanner].readChar();
      let token = null;
      let name = this[_scanDirectiveName]();
      if (name === "YAML") {
        token = this[_scanVersionDirectiveValue](start);
      } else if (name === "TAG") {
        token = this[_scanTagDirectiveValue](start);
      } else {
        utils.warn("Warning: unknown directive.", this[_scanner].spanFrom(start));
        while (!dart.test(this[_isBreakOrEnd])) {
          this[_scanner].readChar();
        }
        return null;
      }
      this[_skipBlanks]();
      this[_skipComment]();
      if (!dart.test(this[_isBreakOrEnd])) {
        dart.throw(new yaml_exception.YamlException.new("Expected comment or line break after directive.", this[_scanner].spanFrom(start)));
      }
      this[_skipLine]();
      return token;
    }
    [_scanDirectiveName]() {
      let start = this[_scanner].position;
      while (dart.test(this[_isNonSpace])) {
        this[_scanner].readChar();
      }
      let name = this[_scanner].substring(start);
      if (name[$isEmpty]) {
        dart.throw(new yaml_exception.YamlException.new("Expected directive name.", this[_scanner].emptySpan));
      } else if (!dart.test(this[_isBlankOrEnd])) {
        dart.throw(new yaml_exception.YamlException.new("Unexpected character in directive name.", this[_scanner].emptySpan));
      }
      return name;
    }
    [_scanVersionDirectiveValue](start) {
      if (start == null) dart.nullFailed(I[0], 901, 53, "start");
      this[_skipBlanks]();
      let major = this[_scanVersionDirectiveNumber]();
      this[_scanner].expect(".");
      let minor = this[_scanVersionDirectiveNumber]();
      return new token$.VersionDirectiveToken.new(this[_scanner].spanFrom(start), major, minor);
    }
    [_scanVersionDirectiveNumber]() {
      let start = this[_scanner].position;
      while (dart.test(this[_isDigit])) {
        this[_scanner].readChar();
      }
      let number = this[_scanner].substring(start);
      if (number[$isEmpty]) {
        dart.throw(new yaml_exception.YamlException.new("Expected version number.", this[_scanner].emptySpan));
      }
      return core.int.parse(number);
    }
    [_scanTagDirectiveValue](start) {
      if (start == null) dart.nullFailed(I[0], 935, 49, "start");
      this[_skipBlanks]();
      let handle = this[_scanTagHandle]({directive: true});
      if (!dart.test(this[_isBlank])) {
        dart.throw(new yaml_exception.YamlException.new("Expected whitespace.", this[_scanner].emptySpan));
      }
      this[_skipBlanks]();
      let prefix = this[_scanTagUri]();
      if (!dart.test(this[_isBlankOrEnd])) {
        dart.throw(new yaml_exception.YamlException.new("Expected whitespace.", this[_scanner].emptySpan));
      }
      return new token$.TagDirectiveToken.new(this[_scanner].spanFrom(start), handle, prefix);
    }
    [_scanAnchor](opts) {
      let anchor = opts && 'anchor' in opts ? opts.anchor : true;
      if (anchor == null) dart.nullFailed(I[0], 954, 27, "anchor");
      let start = this[_scanner].state;
      this[_scanner].readChar();
      let startPosition = this[_scanner].position;
      while (dart.test(this[_isAnchorChar])) {
        this[_scanner].readChar();
      }
      let name = this[_scanner].substring(startPosition);
      let next = this[_scanner].peekChar();
      if (name[$isEmpty] || !dart.test(this[_isBlankOrEnd]) && next !== 63 && next !== 58 && next !== 44 && next !== 93 && next !== 125 && next !== 37 && next !== 64 && next !== 96) {
        dart.throw(new yaml_exception.YamlException.new("Expected alphanumeric character.", this[_scanner].emptySpan));
      }
      if (dart.test(anchor)) {
        return new token$.AnchorToken.new(this[_scanner].spanFrom(start), name);
      } else {
        return new token$.AliasToken.new(this[_scanner].spanFrom(start), name);
      }
    }
    [_scanTag]() {
      let handle = null;
      let suffix = null;
      let start = this[_scanner].state;
      if (this[_scanner].peekChar(1) === 60) {
        this[_scanner].readChar();
        this[_scanner].readChar();
        handle = "";
        suffix = this[_scanTagUri]();
        this[_scanner].expect(">");
      } else {
        handle = this[_scanTagHandle]();
        if (handle.length > 1 && handle[$startsWith]("!") && handle[$endsWith]("!")) {
          suffix = this[_scanTagUri]({flowSeparators: false});
        } else {
          suffix = this[_scanTagUri]({head: handle, flowSeparators: false});
          if (suffix[$isEmpty]) {
            handle = null;
            suffix = "!";
          } else {
            handle = "!";
          }
        }
      }
      return new token$.TagToken.new(this[_scanner].spanFrom(start), handle, suffix);
    }
    [_scanTagHandle](opts) {
      let directive = opts && 'directive' in opts ? opts.directive : false;
      if (directive == null) dart.nullFailed(I[0], 1035, 31, "directive");
      this[_scanner].expect("!");
      let buffer = new core.StringBuffer.new("!");
      let start = this[_scanner].position;
      while (dart.test(this[_isTagChar])) {
        this[_scanner].readChar();
      }
      buffer.write(this[_scanner].substring(start));
      if (this[_scanner].peekChar() === 33) {
        buffer.writeCharCode(this[_scanner].readChar());
      } else {
        if (dart.test(directive) && buffer.toString() !== "!") this[_scanner].expect("!");
      }
      return buffer.toString();
    }
    [_scanTagUri](opts) {
      let head = opts && 'head' in opts ? opts.head : null;
      let flowSeparators = opts && 'flowSeparators' in opts ? opts.flowSeparators : true;
      if (flowSeparators == null) dart.nullFailed(I[0], 1065, 42, "flowSeparators");
      let length = head == null ? 0 : head.length;
      let buffer = new core.StringBuffer.new();
      if (length > 1) buffer.write(dart.nullCheck(head)[$substring](1));
      let start = this[_scanner].position;
      let char = this[_scanner].peekChar();
      while (dart.test(this[_isTagChar]) || dart.test(flowSeparators) && (char === 44 || char === 91 || char === 93)) {
        this[_scanner].readChar();
        char = this[_scanner].peekChar();
      }
      return core.Uri.decodeFull(this[_scanner].substring(start));
    }
    [_scanBlockScalar](opts) {
      let literal = opts && 'literal' in opts ? opts.literal : false;
      if (literal == null) dart.nullFailed(I[0], 1096, 32, "literal");
      let start = this[_scanner].state;
      this[_scanner].readChar();
      let chomping = scanner._Chomping.clip;
      let increment = 0;
      let char = this[_scanner].peekChar();
      if (char === 43 || char === 45) {
        chomping = char === 43 ? scanner._Chomping.keep : scanner._Chomping.strip;
        this[_scanner].readChar();
        if (dart.test(this[_isDigit])) {
          if (this[_scanner].peekChar() === 48) {
            dart.throw(new yaml_exception.YamlException.new("0 may not be used as an indentation indicator.", this[_scanner].spanFrom(start)));
          }
          increment = dart.notNull(this[_scanner].readChar()) - 48;
        }
      } else if (dart.test(this[_isDigit])) {
        if (this[_scanner].peekChar() === 48) {
          dart.throw(new yaml_exception.YamlException.new("0 may not be used as an indentation indicator.", this[_scanner].spanFrom(start)));
        }
        increment = dart.notNull(this[_scanner].readChar()) - 48;
        char = this[_scanner].peekChar();
        if (char === 43 || char === 45) {
          chomping = char === 43 ? scanner._Chomping.keep : scanner._Chomping.strip;
          this[_scanner].readChar();
        }
      }
      this[_skipBlanks]();
      this[_skipComment]();
      if (!dart.test(this[_isBreakOrEnd])) {
        dart.throw(new yaml_exception.YamlException.new("Expected comment or line break.", this[_scanner].emptySpan));
      }
      this[_skipLine]();
      let indent = 0;
      if (increment !== 0) {
        indent = dart.notNull(this[_indent]) >= 0 ? dart.notNull(this[_indent]) + increment : increment;
      }
      let pair = this[_scanBlockScalarBreaks](indent);
      indent = pair.first;
      let trailingBreaks = pair.last;
      let buffer = new core.StringBuffer.new();
      let leadingBreak = "";
      let leadingBlank = false;
      let trailingBlank = false;
      let end = this[_scanner].state;
      while (this[_scanner].column == indent && !dart.test(this[_scanner].isDone)) {
        if (dart.test(this[_isDocumentIndicator])) break;
        trailingBlank = this[_isBlank];
        if (!dart.test(literal) && leadingBreak[$isNotEmpty] && !dart.test(leadingBlank) && !dart.test(trailingBlank)) {
          if (trailingBreaks[$isEmpty]) buffer.writeCharCode(32);
        } else {
          buffer.write(leadingBreak);
        }
        leadingBreak = "";
        buffer.write(trailingBreaks);
        leadingBlank = this[_isBlank];
        let startPosition = this[_scanner].position;
        while (!dart.test(this[_isBreakOrEnd])) {
          this[_scanner].readChar();
        }
        buffer.write(this[_scanner].substring(startPosition));
        end = this[_scanner].state;
        if (!dart.test(this[_scanner].isDone)) leadingBreak = this[_readLine]();
        let pair = this[_scanBlockScalarBreaks](indent);
        indent = pair.first;
        trailingBreaks = pair.last;
      }
      if (chomping != scanner._Chomping.strip) buffer.write(leadingBreak);
      if (chomping == scanner._Chomping.keep) buffer.write(trailingBreaks);
      return new token$.ScalarToken.new(this[_scanner].spanFrom(start, end), buffer.toString(), dart.test(literal) ? style.ScalarStyle.LITERAL : style.ScalarStyle.FOLDED);
    }
    [_scanBlockScalarBreaks](indent) {
      if (indent == null) dart.nullFailed(I[0], 1227, 48, "indent");
      let maxIndent = 0;
      let breaks = new core.StringBuffer.new();
      while (true) {
        while ((indent === 0 || dart.notNull(this[_scanner].column) < dart.notNull(indent)) && this[_scanner].peekChar() === 32) {
          this[_scanner].readChar();
        }
        if (dart.notNull(this[_scanner].column) > dart.notNull(maxIndent)) maxIndent = this[_scanner].column;
        if (!dart.test(this[_isBreak])) break;
        breaks.write(this[_readLine]());
      }
      if (indent === 0) {
        indent = maxIndent;
        if (dart.notNull(indent) < dart.notNull(this[_indent]) + 1) indent = dart.notNull(this[_indent]) + 1;
      }
      return new (T.PairOfint$String()).new(indent, breaks.toString());
    }
    [_scanFlowScalar](opts) {
      let singleQuote = opts && 'singleQuote' in opts ? opts.singleQuote : false;
      if (singleQuote == null) dart.nullFailed(I[0], 1259, 31, "singleQuote");
      let start = this[_scanner].state;
      let buffer = new core.StringBuffer.new();
      this[_scanner].readChar();
      while (true) {
        if (dart.test(this[_isDocumentIndicator])) {
          this[_scanner].error("Unexpected document indicator.");
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
        }
        if (dart.test(this[_scanner].isDone)) {
          dart.throw(new yaml_exception.YamlException.new("Unexpected end of file.", this[_scanner].emptySpan));
        }
        let leadingBlanks = false;
        while (!dart.test(this[_isBlankOrEnd])) {
          let char = this[_scanner].peekChar();
          if (dart.test(singleQuote) && char === 39 && this[_scanner].peekChar(1) === 39) {
            this[_scanner].readChar();
            this[_scanner].readChar();
            buffer.writeCharCode(39);
          } else if (char === (dart.test(singleQuote) ? 39 : 34)) {
            break;
          } else if (!dart.test(singleQuote) && char === 92 && dart.test(this[_isBreakAt](1))) {
            this[_scanner].readChar();
            this[_skipLine]();
            leadingBlanks = true;
            break;
          } else if (!dart.test(singleQuote) && char === 92) {
            let escapeStart = this[_scanner].state;
            let codeLength = null;
            switch (this[_scanner].peekChar(1)) {
              case 48:
              {
                buffer.writeCharCode(0);
                break;
              }
              case 97:
              {
                buffer.writeCharCode(7);
                break;
              }
              case 98:
              {
                buffer.writeCharCode(8);
                break;
              }
              case 116:
              case 9:
              {
                buffer.writeCharCode(9);
                break;
              }
              case 110:
              {
                buffer.writeCharCode(10);
                break;
              }
              case 118:
              {
                buffer.writeCharCode(11);
                break;
              }
              case 102:
              {
                buffer.writeCharCode(12);
                break;
              }
              case 114:
              {
                buffer.writeCharCode(13);
                break;
              }
              case 101:
              {
                buffer.writeCharCode(27);
                break;
              }
              case 32:
              case 34:
              case 47:
              case 92:
              {
                buffer.writeCharCode(dart.nullCheck(this[_scanner].peekChar(1)));
                break;
              }
              case 78:
              {
                buffer.writeCharCode(133);
                break;
              }
              case 95:
              {
                buffer.writeCharCode(160);
                break;
              }
              case 76:
              {
                buffer.writeCharCode(8232);
                break;
              }
              case 80:
              {
                buffer.writeCharCode(8233);
                break;
              }
              case 120:
              {
                codeLength = 2;
                break;
              }
              case 117:
              {
                codeLength = 4;
                break;
              }
              case 85:
              {
                codeLength = 8;
                break;
              }
              default:
              {
                dart.throw(new yaml_exception.YamlException.new("Unknown escape character.", this[_scanner].spanFrom(escapeStart)));
              }
            }
            this[_scanner].readChar();
            this[_scanner].readChar();
            if (codeLength != null) {
              let value = 0;
              for (let i = 0; i < dart.notNull(codeLength); i = i + 1) {
                if (!dart.test(this[_isHex])) {
                  this[_scanner].readChar();
                  dart.throw(new yaml_exception.YamlException.new("Expected " + dart.str(codeLength) + "-digit hexidecimal number.", this[_scanner].spanFrom(escapeStart)));
                }
                value = (value << 4 >>> 0) + dart.notNull(this[_asHex](this[_scanner].readChar()));
              }
              if (value >= 55296 && value <= 57343 || value > 1114111) {
                dart.throw(new yaml_exception.YamlException.new("Invalid Unicode character escape code.", this[_scanner].spanFrom(escapeStart)));
              }
              buffer.writeCharCode(value);
            }
          } else {
            buffer.writeCharCode(this[_scanner].readChar());
          }
        }
        if (this[_scanner].peekChar() === (dart.test(singleQuote) ? 39 : 34)) {
          break;
        }
        let whitespace = new core.StringBuffer.new();
        let leadingBreak = "";
        let trailingBreaks = new core.StringBuffer.new();
        while (dart.test(this[_isBlank]) || dart.test(this[_isBreak])) {
          if (dart.test(this[_isBlank])) {
            if (!leadingBlanks) {
              whitespace.writeCharCode(this[_scanner].readChar());
            } else {
              this[_scanner].readChar();
            }
          } else {
            if (!leadingBlanks) {
              whitespace.clear();
              leadingBreak = this[_readLine]();
              leadingBlanks = true;
            } else {
              trailingBreaks.write(this[_readLine]());
            }
          }
        }
        if (leadingBlanks) {
          if (leadingBreak[$isNotEmpty] && dart.test(trailingBreaks.isEmpty)) {
            buffer.writeCharCode(32);
          } else {
            buffer.write(trailingBreaks);
          }
        } else {
          buffer.write(whitespace);
          whitespace.clear();
        }
      }
      this[_scanner].readChar();
      return new token$.ScalarToken.new(this[_scanner].spanFrom(start), buffer.toString(), dart.test(singleQuote) ? style.ScalarStyle.SINGLE_QUOTED : style.ScalarStyle.DOUBLE_QUOTED);
    }
    [_scanPlainScalar]() {
      let start = this[_scanner].state;
      let end = this[_scanner].state;
      let buffer = new core.StringBuffer.new();
      let leadingBreak = "";
      let trailingBreaks = "";
      let whitespace = new core.StringBuffer.new();
      let indent = dart.notNull(this[_indent]) + 1;
      while (true) {
        if (dart.test(this[_isDocumentIndicator])) break;
        if (this[_scanner].peekChar() === 35) break;
        if (dart.test(this[_isPlainChar])) {
          if (leadingBreak[$isNotEmpty]) {
            if (trailingBreaks[$isEmpty]) {
              buffer.writeCharCode(32);
            } else {
              buffer.write(trailingBreaks);
            }
            leadingBreak = "";
            trailingBreaks = "";
          } else {
            buffer.write(whitespace);
            whitespace.clear();
          }
        }
        let startPosition = this[_scanner].position;
        while (dart.test(this[_isPlainChar])) {
          this[_scanner].readChar();
        }
        buffer.write(this[_scanner].substring(startPosition));
        end = this[_scanner].state;
        if (!dart.test(this[_isBlank]) && !dart.test(this[_isBreak])) break;
        while (dart.test(this[_isBlank]) || dart.test(this[_isBreak])) {
          if (dart.test(this[_isBlank])) {
            if (leadingBreak[$isNotEmpty] && dart.notNull(this[_scanner].column) < indent && this[_scanner].peekChar() === 9) {
              this[_scanner].error("Expected a space but found a tab.", {length: 1});
              dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
            }
            if (leadingBreak[$isEmpty]) {
              whitespace.writeCharCode(this[_scanner].readChar());
            } else {
              this[_scanner].readChar();
            }
          } else {
            if (leadingBreak[$isEmpty]) {
              leadingBreak = this[_readLine]();
              whitespace.clear();
            } else {
              trailingBreaks = this[_readLine]();
            }
          }
        }
        if (dart.test(this[_inBlockContext]) && dart.notNull(this[_scanner].column) < indent) break;
      }
      if (leadingBreak[$isNotEmpty]) this[_simpleKeyAllowed] = true;
      return new token$.ScalarToken.new(this[_scanner].spanFrom(start, end), buffer.toString(), style.ScalarStyle.PLAIN);
    }
    [_skipLine]() {
      let char = this[_scanner].peekChar();
      if (char !== 13 && char !== 10) return;
      this[_scanner].readChar();
      if (char === 13 && this[_scanner].peekChar() === 10) this[_scanner].readChar();
    }
    [_readLine]() {
      let char = this[_scanner].peekChar();
      if (char !== 13 && char !== 10) {
        dart.throw(new yaml_exception.YamlException.new("Expected newline.", this[_scanner].emptySpan));
      }
      this[_scanner].readChar();
      if (char === 13 && this[_scanner].peekChar() === 10) this[_scanner].readChar();
      return "\n";
    }
    [_isBlankAt](offset) {
      if (offset == null) dart.nullFailed(I[0], 1548, 23, "offset");
      let char = this[_scanner].peekChar(offset);
      return char === 32 || char === 9;
    }
    [_isBreakAt](offset) {
      if (offset == null) dart.nullFailed(I[0], 1554, 23, "offset");
      let char = this[_scanner].peekChar(offset);
      return char === 13 || char === 10;
    }
    [_isBlankOrEndAt](offset) {
      if (offset == null) dart.nullFailed(I[0], 1563, 28, "offset");
      let char = this[_scanner].peekChar(offset);
      return char == null || char === 32 || char === 9 || char === 13 || char === 10;
    }
    [_isPlainCharAt](offset) {
      if (offset == null) dart.nullFailed(I[0], 1575, 27, "offset");
      switch (this[_scanner].peekChar(offset)) {
        case 58:
        {
          return this[_isPlainSafeAt](dart.notNull(offset) + 1);
        }
        case 35:
        {
          let previous = this[_scanner].peekChar(dart.notNull(offset) - 1);
          return previous !== 32 && previous !== 9;
        }
        default:
        {
          return this[_isPlainSafeAt](offset);
        }
      }
    }
    [_isPlainSafeAt](offset) {
      if (offset == null) dart.nullFailed(I[0], 1590, 27, "offset");
      let char = this[_scanner].peekChar(offset);
      switch (char) {
        case 44:
        case 91:
        case 93:
        case 123:
        case 125:
        {
          return this[_inBlockContext];
        }
        case 32:
        case 9:
        case 10:
        case 13:
        case 65279:
        {
          return false;
        }
        case 133:
        {
          return true;
        }
        default:
        {
          return char != null && (dart.notNull(char) >= 32 && dart.notNull(char) <= 126 || dart.notNull(char) >= 160 && dart.notNull(char) <= 55295 || dart.notNull(char) >= 57344 && dart.notNull(char) <= 65533 || dart.notNull(char) >= 65536 && dart.notNull(char) <= 1114111);
        }
      }
    }
    [_asHex](char) {
      if (char == null) dart.nullFailed(I[0], 1619, 18, "char");
      if (dart.notNull(char) <= 57) return dart.notNull(char) - 48;
      if (dart.notNull(char) <= 70) return 10 + dart.notNull(char) - 65;
      return 10 + dart.notNull(char) - 97;
    }
    [_skipBlanks]() {
      while (dart.test(this[_isBlank])) {
        this[_scanner].readChar();
      }
    }
    [_skipComment]() {
      if (this[_scanner].peekChar() !== 35) return;
      while (!dart.test(this[_isBreakOrEnd])) {
        this[_scanner].readChar();
      }
    }
    [_reportError](exception) {
      let t0;
      if (exception == null) dart.nullFailed(I[0], 1642, 35, "exception");
      if (!dart.test(this[_recover])) {
        dart.throw(exception);
      }
      t0 = this[_errorListener];
      t0 == null ? null : t0.onError(exception);
    }
  };
  (scanner.Scanner.new = function(source, opts) {
    if (source == null) dart.nullFailed(I[0], 298, 18, "source");
    let sourceUrl = opts && 'sourceUrl' in opts ? opts.sourceUrl : null;
    let recover = opts && 'recover' in opts ? opts.recover : false;
    if (recover == null) dart.nullFailed(I[0], 299, 29, "recover");
    let errorListener = opts && 'errorListener' in opts ? opts.errorListener : null;
    this[_streamStartProduced] = false;
    this[_streamEndProduced] = false;
    this[_tokens] = new (T.QueueListOfToken()).new();
    this[_tokensParsed] = 0;
    this[_tokenAvailable] = false;
    this[_indents] = T.JSArrayOfint().of([-1]);
    this[_simpleKeyAllowed] = true;
    this[_simpleKeys] = T.JSArrayOf_SimpleKeyN().of([null]);
    this[_recover] = recover;
    this[_errorListener] = errorListener;
    this[_scanner] = new eager_span_scanner.EagerSpanScanner.new(source, {sourceUrl: sourceUrl});
    ;
  }).prototype = scanner.Scanner.prototype;
  dart.addTypeTests(scanner.Scanner);
  dart.addTypeCaches(scanner.Scanner);
  dart.setMethodSignature(scanner.Scanner, () => ({
    __proto__: dart.getMethods(scanner.Scanner.__proto__),
    scan: dart.fnType(token$.Token, []),
    advance: dart.fnType(dart.nullable(token$.Token), []),
    peek: dart.fnType(dart.nullable(token$.Token), []),
    [_fetchMoreTokens]: dart.fnType(dart.void, []),
    [_fetchNextToken]: dart.fnType(dart.void, []),
    [_invalidScalarCharacter]: dart.fnType(dart.void, []),
    [_staleSimpleKeys]: dart.fnType(dart.void, []),
    [_saveSimpleKey]: dart.fnType(dart.void, []),
    [_removeSimpleKey]: dart.fnType(dart.void, []),
    [_increaseFlowLevel]: dart.fnType(dart.void, []),
    [_decreaseFlowLevel]: dart.fnType(dart.void, []),
    [_rollIndent]: dart.fnType(dart.void, [core.int, token$.TokenType, location.SourceLocation], {tokenNumber: dart.nullable(core.int)}, {}),
    [_unrollIndent]: dart.fnType(dart.void, [core.int]),
    [_resetIndent]: dart.fnType(dart.void, []),
    [_fetchStreamStart]: dart.fnType(dart.void, []),
    [_fetchStreamEnd]: dart.fnType(dart.void, []),
    [_fetchDirective]: dart.fnType(dart.void, []),
    [_fetchDocumentIndicator]: dart.fnType(dart.void, [token$.TokenType]),
    [_fetchFlowCollectionStart]: dart.fnType(dart.void, [token$.TokenType]),
    [_fetchFlowCollectionEnd]: dart.fnType(dart.void, [token$.TokenType]),
    [_fetchFlowEntry]: dart.fnType(dart.void, []),
    [_fetchBlockEntry]: dart.fnType(dart.void, []),
    [_fetchKey]: dart.fnType(dart.void, []),
    [_fetchValue]: dart.fnType(dart.void, []),
    [_addCharToken]: dart.fnType(dart.void, [token$.TokenType]),
    [_fetchAnchor]: dart.fnType(dart.void, [], {anchor: core.bool}, {}),
    [_fetchTag]: dart.fnType(dart.void, []),
    [_fetchBlockScalar]: dart.fnType(dart.void, [], {literal: core.bool}, {}),
    [_fetchFlowScalar]: dart.fnType(dart.void, [], {singleQuote: core.bool}, {}),
    [_fetchPlainScalar]: dart.fnType(dart.void, []),
    [_scanToNextToken]: dart.fnType(dart.void, []),
    [_scanDirective]: dart.fnType(dart.nullable(token$.Token), []),
    [_scanDirectiveName]: dart.fnType(core.String, []),
    [_scanVersionDirectiveValue]: dart.fnType(token$.Token, [line_scanner.LineScannerState]),
    [_scanVersionDirectiveNumber]: dart.fnType(core.int, []),
    [_scanTagDirectiveValue]: dart.fnType(token$.Token, [line_scanner.LineScannerState]),
    [_scanAnchor]: dart.fnType(token$.Token, [], {anchor: core.bool}, {}),
    [_scanTag]: dart.fnType(token$.Token, []),
    [_scanTagHandle]: dart.fnType(core.String, [], {directive: core.bool}, {}),
    [_scanTagUri]: dart.fnType(core.String, [], {flowSeparators: core.bool, head: dart.nullable(core.String)}, {}),
    [_scanBlockScalar]: dart.fnType(token$.Token, [], {literal: core.bool}, {}),
    [_scanBlockScalarBreaks]: dart.fnType(utils.Pair$(core.int, core.String), [core.int]),
    [_scanFlowScalar]: dart.fnType(token$.Token, [], {singleQuote: core.bool}, {}),
    [_scanPlainScalar]: dart.fnType(token$.Token, []),
    [_skipLine]: dart.fnType(dart.void, []),
    [_readLine]: dart.fnType(core.String, []),
    [_isBlankAt]: dart.fnType(core.bool, [core.int]),
    [_isBreakAt]: dart.fnType(core.bool, [core.int]),
    [_isBlankOrEndAt]: dart.fnType(core.bool, [core.int]),
    [_isPlainCharAt]: dart.fnType(core.bool, [core.int]),
    [_isPlainSafeAt]: dart.fnType(core.bool, [core.int]),
    [_asHex]: dart.fnType(core.int, [core.int]),
    [_skipBlanks]: dart.fnType(dart.void, []),
    [_skipComment]: dart.fnType(dart.void, []),
    [_reportError]: dart.fnType(dart.void, [yaml_exception.YamlException])
  }));
  dart.setGetterSignature(scanner.Scanner, () => ({
    __proto__: dart.getGetters(scanner.Scanner.__proto__),
    [_indent]: core.int,
    [_inBlockContext]: core.bool,
    [_isBreakOrEnd]: core.bool,
    [_isBreak]: core.bool,
    [_isBlankOrEnd]: core.bool,
    [_isBlank]: core.bool,
    [_isTagChar]: core.bool,
    [_isAnchorChar]: core.bool,
    [_isDigit]: core.bool,
    [_isHex]: core.bool,
    [_isPlainChar]: core.bool,
    [_isNonBreak]: core.bool,
    [_isNonSpace]: core.bool,
    [_isDocumentIndicator]: core.bool
  }));
  dart.setLibraryUri(scanner.Scanner, I[1]);
  dart.setFieldSignature(scanner.Scanner, () => ({
    __proto__: dart.getFields(scanner.Scanner.__proto__),
    [_recover]: dart.finalFieldType(core.bool),
    [_errorListener]: dart.finalFieldType(dart.nullable(error_listener.ErrorListener)),
    [_scanner]: dart.finalFieldType(span_scanner.SpanScanner),
    [_streamStartProduced]: dart.fieldType(core.bool),
    [_streamEndProduced]: dart.fieldType(core.bool),
    [_tokens]: dart.finalFieldType(queue_list.QueueList$(token$.Token)),
    [_tokensParsed]: dart.fieldType(core.int),
    [_tokenAvailable]: dart.fieldType(core.bool),
    [_indents]: dart.finalFieldType(core.List$(core.int)),
    [_simpleKeyAllowed]: dart.fieldType(core.bool),
    [_simpleKeys]: dart.finalFieldType(core.List$(dart.nullable(scanner._SimpleKey)))
  }));
  dart.defineLazy(scanner.Scanner, {
    /*scanner.Scanner.TAB*/get TAB() {
      return 9;
    },
    /*scanner.Scanner.LF*/get LF() {
      return 10;
    },
    /*scanner.Scanner.CR*/get CR() {
      return 13;
    },
    /*scanner.Scanner.SP*/get SP() {
      return 32;
    },
    /*scanner.Scanner.DOLLAR*/get DOLLAR() {
      return 36;
    },
    /*scanner.Scanner.LEFT_PAREN*/get LEFT_PAREN() {
      return 40;
    },
    /*scanner.Scanner.RIGHT_PAREN*/get RIGHT_PAREN() {
      return 41;
    },
    /*scanner.Scanner.PLUS*/get PLUS() {
      return 43;
    },
    /*scanner.Scanner.COMMA*/get COMMA() {
      return 44;
    },
    /*scanner.Scanner.HYPHEN*/get HYPHEN() {
      return 45;
    },
    /*scanner.Scanner.PERIOD*/get PERIOD() {
      return 46;
    },
    /*scanner.Scanner.QUESTION*/get QUESTION() {
      return 63;
    },
    /*scanner.Scanner.COLON*/get COLON() {
      return 58;
    },
    /*scanner.Scanner.SEMICOLON*/get SEMICOLON() {
      return 59;
    },
    /*scanner.Scanner.EQUALS*/get EQUALS() {
      return 61;
    },
    /*scanner.Scanner.LEFT_SQUARE*/get LEFT_SQUARE() {
      return 91;
    },
    /*scanner.Scanner.RIGHT_SQUARE*/get RIGHT_SQUARE() {
      return 93;
    },
    /*scanner.Scanner.LEFT_CURLY*/get LEFT_CURLY() {
      return 123;
    },
    /*scanner.Scanner.RIGHT_CURLY*/get RIGHT_CURLY() {
      return 125;
    },
    /*scanner.Scanner.HASH*/get HASH() {
      return 35;
    },
    /*scanner.Scanner.AMPERSAND*/get AMPERSAND() {
      return 38;
    },
    /*scanner.Scanner.ASTERISK*/get ASTERISK() {
      return 42;
    },
    /*scanner.Scanner.EXCLAMATION*/get EXCLAMATION() {
      return 33;
    },
    /*scanner.Scanner.VERTICAL_BAR*/get VERTICAL_BAR() {
      return 124;
    },
    /*scanner.Scanner.LEFT_ANGLE*/get LEFT_ANGLE() {
      return 60;
    },
    /*scanner.Scanner.RIGHT_ANGLE*/get RIGHT_ANGLE() {
      return 62;
    },
    /*scanner.Scanner.SINGLE_QUOTE*/get SINGLE_QUOTE() {
      return 39;
    },
    /*scanner.Scanner.DOUBLE_QUOTE*/get DOUBLE_QUOTE() {
      return 34;
    },
    /*scanner.Scanner.PERCENT*/get PERCENT() {
      return 37;
    },
    /*scanner.Scanner.AT*/get AT() {
      return 64;
    },
    /*scanner.Scanner.GRAVE_ACCENT*/get GRAVE_ACCENT() {
      return 96;
    },
    /*scanner.Scanner.TILDE*/get TILDE() {
      return 126;
    },
    /*scanner.Scanner.NULL*/get NULL() {
      return 0;
    },
    /*scanner.Scanner.BELL*/get BELL() {
      return 7;
    },
    /*scanner.Scanner.BACKSPACE*/get BACKSPACE() {
      return 8;
    },
    /*scanner.Scanner.VERTICAL_TAB*/get VERTICAL_TAB() {
      return 11;
    },
    /*scanner.Scanner.FORM_FEED*/get FORM_FEED() {
      return 12;
    },
    /*scanner.Scanner.ESCAPE*/get ESCAPE() {
      return 27;
    },
    /*scanner.Scanner.SLASH*/get SLASH() {
      return 47;
    },
    /*scanner.Scanner.BACKSLASH*/get BACKSLASH() {
      return 92;
    },
    /*scanner.Scanner.UNDERSCORE*/get UNDERSCORE() {
      return 95;
    },
    /*scanner.Scanner.NEL*/get NEL() {
      return 133;
    },
    /*scanner.Scanner.NBSP*/get NBSP() {
      return 160;
    },
    /*scanner.Scanner.LINE_SEPARATOR*/get LINE_SEPARATOR() {
      return 8232;
    },
    /*scanner.Scanner.PARAGRAPH_SEPARATOR*/get PARAGRAPH_SEPARATOR() {
      return 8233;
    },
    /*scanner.Scanner.BOM*/get BOM() {
      return 65279;
    },
    /*scanner.Scanner.NUMBER_0*/get NUMBER_0() {
      return 48;
    },
    /*scanner.Scanner.NUMBER_9*/get NUMBER_9() {
      return 57;
    },
    /*scanner.Scanner.LETTER_A*/get LETTER_A() {
      return 97;
    },
    /*scanner.Scanner.LETTER_B*/get LETTER_B() {
      return 98;
    },
    /*scanner.Scanner.LETTER_E*/get LETTER_E() {
      return 101;
    },
    /*scanner.Scanner.LETTER_F*/get LETTER_F() {
      return 102;
    },
    /*scanner.Scanner.LETTER_N*/get LETTER_N() {
      return 110;
    },
    /*scanner.Scanner.LETTER_R*/get LETTER_R() {
      return 114;
    },
    /*scanner.Scanner.LETTER_T*/get LETTER_T() {
      return 116;
    },
    /*scanner.Scanner.LETTER_U*/get LETTER_U() {
      return 117;
    },
    /*scanner.Scanner.LETTER_V*/get LETTER_V() {
      return 118;
    },
    /*scanner.Scanner.LETTER_X*/get LETTER_X() {
      return 120;
    },
    /*scanner.Scanner.LETTER_Z*/get LETTER_Z() {
      return 122;
    },
    /*scanner.Scanner.LETTER_CAP_A*/get LETTER_CAP_A() {
      return 65;
    },
    /*scanner.Scanner.LETTER_CAP_F*/get LETTER_CAP_F() {
      return 70;
    },
    /*scanner.Scanner.LETTER_CAP_L*/get LETTER_CAP_L() {
      return 76;
    },
    /*scanner.Scanner.LETTER_CAP_N*/get LETTER_CAP_N() {
      return 78;
    },
    /*scanner.Scanner.LETTER_CAP_P*/get LETTER_CAP_P() {
      return 80;
    },
    /*scanner.Scanner.LETTER_CAP_U*/get LETTER_CAP_U() {
      return 85;
    },
    /*scanner.Scanner.LETTER_CAP_X*/get LETTER_CAP_X() {
      return 88;
    },
    /*scanner.Scanner.LETTER_CAP_Z*/get LETTER_CAP_Z() {
      return 90;
    }
  }, false);
  scanner._SimpleKey = class _SimpleKey extends core.Object {};
  (scanner._SimpleKey.new = function(tokenNumber, line, column, location, opts) {
    if (tokenNumber == null) dart.nullFailed(I[0], 1679, 19, "tokenNumber");
    if (line == null) dart.nullFailed(I[0], 1679, 37, "line");
    if (column == null) dart.nullFailed(I[0], 1679, 48, "column");
    if (location == null) dart.nullFailed(I[0], 1679, 61, "location");
    let required = opts && 'required' in opts ? opts.required : null;
    if (required == null) dart.nullFailed(I[0], 1680, 22, "required");
    this.tokenNumber = tokenNumber;
    this.line = line;
    this.column = column;
    this.location = location;
    this.required = required;
    ;
  }).prototype = scanner._SimpleKey.prototype;
  dart.addTypeTests(scanner._SimpleKey);
  dart.addTypeCaches(scanner._SimpleKey);
  dart.setLibraryUri(scanner._SimpleKey, I[1]);
  dart.setFieldSignature(scanner._SimpleKey, () => ({
    __proto__: dart.getFields(scanner._SimpleKey.__proto__),
    tokenNumber: dart.finalFieldType(core.int),
    location: dart.finalFieldType(location.SourceLocation),
    line: dart.finalFieldType(core.int),
    column: dart.finalFieldType(core.int),
    required: dart.finalFieldType(core.bool)
  }));
  var _name$ = dart.privateName(scanner, "_name");
  scanner._Chomping = class _Chomping extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (scanner._Chomping.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 1687, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 1687, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = scanner._Chomping.prototype;
  dart.addTypeTests(scanner._Chomping);
  dart.addTypeCaches(scanner._Chomping);
  dart.setLibraryUri(scanner._Chomping, I[1]);
  dart.setFieldSignature(scanner._Chomping, () => ({
    __proto__: dart.getFields(scanner._Chomping.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scanner._Chomping, ['toString']);
  scanner._Chomping.strip = C[0] || CT.C0;
  scanner._Chomping.clip = C[1] || CT.C1;
  scanner._Chomping.keep = C[2] || CT.C2;
  scanner._Chomping.values = C[3] || CT.C3;
  dart.trackLibraries("packages/yaml/src/scanner.dart", {
    "package:yaml/src/scanner.dart": scanner
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["scanner.dart"],"names":[],"mappings":"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","file":"../../../../../../../../O:/packages/yaml/src/scanner.dart.lib.js"}');
  // Exports:
  return {
    src__scanner: scanner
  };
}));

//# sourceMappingURL=scanner.dart.lib.js.map
