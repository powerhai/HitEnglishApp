define(['dart_sdk', 'packages/sqflite/src/factory_impl.dart', 'packages/path/src/path_set.dart', 'packages/sqflite_common/src/open_options.dart', 'packages/dio_http_cache/src/core/obj.dart', 'packages/sqflite_common/src/sql_builder.dart', 'packages/dio_http_cache/src/store/store_impl.dart'], (function load__packages__dio_http_cache__src__store__store_disk_dart(dart_sdk, packages__sqflite__src__factory_impl$46dart, packages__path__src__path_set$46dart, packages__sqflite_common__src__open_options$46dart, packages__dio_http_cache__src__core__obj$46dart, packages__sqflite_common__src__sql_builder$46dart, packages__dio_http_cache__src__store__store_impl$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const io = dart_sdk.io;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const sqflite = packages__sqflite__src__factory_impl$46dart.sqflite;
  const path$ = packages__path__src__path_set$46dart.path;
  const sqlite_api = packages__sqflite_common__src__open_options$46dart.sqlite_api;
  const obj = packages__dio_http_cache__src__core__obj$46dart.src__core__obj;
  const sql_builder = packages__sqflite_common__src__sql_builder$46dart.src__sql_builder;
  const store_impl = packages__dio_http_cache__src__store__store_impl$46dart.src__store__store_impl;
  var store_disk = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $trim = dartx.trim;
  var $forEach = dartx.forEach;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    DatabaseL: () => (T.DatabaseL = dart.constFn(dart.legacy(sqlite_api.Database)))(),
    DatabaseLTodynamic: () => (T.DatabaseLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.DatabaseL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    ListOfMapLOfStringL$dynamic: () => (T.ListOfMapLOfStringL$dynamic = dart.constFn(core.List$(T.MapLOfStringL$dynamic())))(),
    ListLOfMapLOfStringL$dynamic: () => (T.ListLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(T.ListOfMapLOfStringL$dynamic())))(),
    ListLOfMapLOfStringL$dynamicToboolL: () => (T.ListLOfMapLOfStringL$dynamicToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ListLOfMapLOfStringL$dynamic()])))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    ListLOfStringL: () => (T.ListLOfStringL = dart.constFn(dart.legacy(T.ListOfStringL())))(),
    JSArrayOfListLOfStringL: () => (T.JSArrayOfListLOfStringL = dart.constFn(_interceptors.JSArray$(T.ListLOfStringL())))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T.FutureLOfNull = dart.constFn(dart.legacy(T.FutureOfNull())))(),
    StringLToFutureLOfNull: () => (T.StringLToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [T.StringL()])))(),
    TransactionL: () => (T.TransactionL = dart.constFn(dart.legacy(sqlite_api.Transaction)))(),
    TransactionLToFutureLOfNull: () => (T.TransactionLToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [T.TransactionL()])))(),
    CacheObjL: () => (T.CacheObjL = dart.constFn(dart.legacy(obj.CacheObj)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:dio_http_cache/src/store/store_disk.dart"];
  var _tableCacheObject = dart.privateName(store_disk, "_tableCacheObject");
  var _columnKey = dart.privateName(store_disk, "_columnKey");
  var _columnSubKey = dart.privateName(store_disk, "_columnSubKey");
  var _columnMaxAgeDate = dart.privateName(store_disk, "_columnMaxAgeDate");
  var _columnMaxStaleDate = dart.privateName(store_disk, "_columnMaxStaleDate");
  var _columnContent = dart.privateName(store_disk, "_columnContent");
  var _columnStatusCode = dart.privateName(store_disk, "_columnStatusCode");
  var _columnHeaders = dart.privateName(store_disk, "_columnHeaders");
  var _db = dart.privateName(store_disk, "_db");
  var _databasePath$ = dart.privateName(store_disk, "_databasePath");
  var _databaseName$ = dart.privateName(store_disk, "_databaseName");
  var _encrypt$ = dart.privateName(store_disk, "_encrypt");
  var _decrypt$ = dart.privateName(store_disk, "_decrypt");
  var _tryFixDbNoVersionBug = dart.privateName(store_disk, "_tryFixDbNoVersionBug");
  var _onCreate = dart.privateName(store_disk, "_onCreate");
  var _onUpgrade = dart.privateName(store_disk, "_onUpgrade");
  var _clearExpired = dart.privateName(store_disk, "_clearExpired");
  var _database = dart.privateName(store_disk, "_database");
  var _getCreateTableSql = dart.privateName(store_disk, "_getCreateTableSql");
  var _dbUpgradeList = dart.privateName(store_disk, "_dbUpgradeList");
  var _decryptCacheObj = dart.privateName(store_disk, "_decryptCacheObj");
  var _encryptCacheStr = dart.privateName(store_disk, "_encryptCacheStr");
  var _decryptCacheStr = dart.privateName(store_disk, "_decryptCacheStr");
  store_disk.DiskCacheStore = class DiskCacheStore extends store_impl.ICacheStore {
    get [_database]() {
      return async.async(T.DatabaseL(), (function* _database() {
        if (this[_db] == null) {
          let path = this[_databasePath$];
          if (path == null || path.length <= 0) {
            path = (yield sqflite.getDatabasesPath());
          }
          yield io.Directory.new(path).create({recursive: true});
          path = path$.join(path, dart.str(this[_databaseName$]) + ".db");
          this[_db] = (yield sqflite.openDatabase(path, {version: 3, onConfigure: dart.fn(db => this[_tryFixDbNoVersionBug](db, path), T.DatabaseLTodynamic()), onCreate: dart.bind(this, _onCreate), onUpgrade: dart.bind(this, _onUpgrade)}));
          yield this[_clearExpired](this[_db]);
        }
        return this[_db];
      }).bind(this));
    }
    [_tryFixDbNoVersionBug](db, dbPath) {
      return async.async(dart.dynamic, (function* _tryFixDbNoVersionBug() {
        if ((yield db.getVersion()) === 0) {
          let isTableUserLogExist = (yield db.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '" + dart.str(this[_tableCacheObject]) + "'").then(T.boolL(), dart.fn(v => v != null && dart.notNull(v[$length]) > 0, T.ListLOfMapLOfStringL$dynamicToboolL())));
          if (dart.test(isTableUserLogExist)) {
            yield db.setVersion(1);
          }
        }
      }).bind(this));
    }
    [_getCreateTableSql]() {
      return "      CREATE TABLE IF NOT EXISTS " + dart.str(this[_tableCacheObject]) + " ( \n        " + dart.str(this[_columnKey]) + " text, \n        " + dart.str(this[_columnSubKey]) + " text, \n        " + dart.str(this[_columnMaxAgeDate]) + " integer,\n        " + dart.str(this[_columnMaxStaleDate]) + " integer,\n        " + dart.str(this[_columnContent]) + " BLOB,\n        " + dart.str(this[_columnStatusCode]) + " integer,\n        " + dart.str(this[_columnHeaders]) + " BLOB,\n        PRIMARY KEY (" + dart.str(this[_columnKey]) + ", " + dart.str(this[_columnSubKey]) + ")\n        ) \n      ";
    }
    [_onCreate](db, version) {
      return async.async(dart.dynamic, (function* _onCreate() {
        yield db.execute(T.StringL().as(this[_getCreateTableSql]()));
      }).bind(this));
    }
    [_dbUpgradeList]() {
      return T.JSArrayOfListLOfStringL().of([null, T.JSArrayOfStringL().of(["ALTER TABLE " + dart.str(this[_tableCacheObject]) + " ADD COLUMN " + dart.str(this[_columnStatusCode]) + " integer;"]), T.JSArrayOfStringL().of(["DROP TABLE IF EXISTS " + dart.str(this[_tableCacheObject]) + ";", T.StringL().as(this[_getCreateTableSql]())])]);
    }
    [_onUpgrade](db, oldVersion, newVersion) {
      return async.async(dart.dynamic, (function* _onUpgrade() {
        let mergeLength = this[_dbUpgradeList]()[$length];
        if (dart.notNull(oldVersion) < 0 || dart.notNull(oldVersion) >= dart.notNull(mergeLength)) return;
        yield db.transaction(core.Null, dart.fn(txn => async.async(core.Null, (function*() {
          let tempVersion = oldVersion;
          while (dart.notNull(tempVersion) < dart.notNull(newVersion)) {
            if (dart.notNull(tempVersion) < dart.notNull(mergeLength)) {
              let sqlList = this[_dbUpgradeList]()[$_get](tempVersion);
              if (sqlList != null && dart.notNull(sqlList[$length]) > 0) {
                sqlList[$forEach](dart.fn(sql => async.async(core.Null, function*() {
                  sql = sql[$trim]();
                  if (sql != null && sql.length > 0) {
                    yield txn.execute(sql);
                  }
                }), T.StringLToFutureLOfNull()));
              }
            }
            tempVersion = dart.notNull(tempVersion) + 1;
          }
        }).bind(this)), T.TransactionLToFutureLOfNull()));
      }).bind(this));
    }
    getCacheObj(key, opts) {
      let subKey = opts && 'subKey' in opts ? opts.subKey : null;
      return async.async(T.CacheObjL(), (function* getCacheObj() {
        let db = (yield this[_database]);
        if (db == null) return null;
        let where = dart.str(this[_columnKey]) + "=\"" + dart.str(key) + "\"";
        if (subKey != null) where = where + (" and " + dart.str(this[_columnSubKey]) + "=\"" + dart.str(subKey) + "\"");
        let resultList = (yield db.query(this[_tableCacheObject], {where: where}));
        if (resultList == null || dart.notNull(resultList[$length]) <= 0) return null;
        return yield this[_decryptCacheObj](obj.CacheObj.fromJson(resultList[$_get](0)));
      }).bind(this));
    }
    setCacheObj(obj) {
      return async.async(T.boolL(), (function* setCacheObj() {
        let t0, t0$, t0$0;
        let db = (yield this[_database]);
        if (db == null) return false;
        let content = (yield this[_encryptCacheStr](obj.content));
        let headers = (yield this[_encryptCacheStr](obj.headers));
        yield db.insert(this[_tableCacheObject], new (T.IdentityMapOfStringL$dynamic()).from([this[_columnKey], obj.key, this[_columnSubKey], (t0 = obj.subKey, t0 == null ? "" : t0), this[_columnMaxAgeDate], (t0$ = obj.maxAgeDate, t0$ == null ? 0 : t0$), this[_columnMaxStaleDate], (t0$0 = obj.maxStaleDate, t0$0 == null ? 0 : t0$0), this[_columnContent], content, this[_columnStatusCode], obj.statusCode, this[_columnHeaders], headers]), {conflictAlgorithm: sql_builder.ConflictAlgorithm.replace});
        return true;
      }).bind(this));
    }
    delete(key, opts) {
      let subKey = opts && 'subKey' in opts ? opts.subKey : null;
      return async.async(T.boolL(), (function* $delete() {
        let db = (yield this[_database]);
        if (db == null) return false;
        let where = dart.str(this[_columnKey]) + "=\"" + dart.str(key) + "\"";
        if (subKey != null) where = where + (" and " + dart.str(this[_columnSubKey]) + "=\"" + dart.str(subKey) + "\"");
        return 0 !== (yield db.delete(this[_tableCacheObject], {where: where}));
      }).bind(this));
    }
    clearExpired() {
      return async.async(T.boolL(), (function* clearExpired() {
        let db = (yield this[_database]);
        return this[_clearExpired](db);
      }).bind(this));
    }
    [_clearExpired](db) {
      return async.async(T.boolL(), (function* _clearExpired() {
        if (db == null) return false;
        let now = new core.DateTime.now().millisecondsSinceEpoch;
        let where1 = dart.str(this[_columnMaxStaleDate]) + " > 0 and " + dart.str(this[_columnMaxStaleDate]) + " < " + dart.str(now);
        let where2 = dart.str(this[_columnMaxStaleDate]) + " <= 0 and " + dart.str(this[_columnMaxAgeDate]) + " < " + dart.str(now);
        return 0 !== (yield db.delete(this[_tableCacheObject], {where: "( " + where1 + " ) or ( " + where2 + " )"}));
      }).bind(this));
    }
    clearAll() {
      return async.async(T.boolL(), (function* clearAll() {
        let db = (yield this[_database]);
        if (db == null) return false;
        return 0 !== (yield db.delete(this[_tableCacheObject]));
      }).bind(this));
    }
    [_decryptCacheObj](obj) {
      return async.async(T.CacheObjL(), (function* _decryptCacheObj() {
        obj.content = (yield this[_decryptCacheStr](obj.content));
        obj.headers = (yield this[_decryptCacheStr](obj.headers));
        return obj;
      }).bind(this));
    }
    [_decryptCacheStr](bytes) {
      return async.async(T.ListLOfintL(), (function* _decryptCacheStr() {
        let t0;
        if (bytes == null) return null;
        if (this[_decrypt$] != null) {
          bytes = (yield (t0 = bytes, this[_decrypt$](t0)));
        }
        return bytes;
      }).bind(this));
    }
    [_encryptCacheStr](bytes) {
      return async.async(T.ListLOfintL(), (function* _encryptCacheStr() {
        let t0;
        if (bytes == null) return null;
        if (this[_encrypt$] != null) {
          bytes = (yield (t0 = bytes, this[_encrypt$](t0)));
        }
        return bytes;
      }).bind(this));
    }
  };
  (store_disk.DiskCacheStore.new = function(_databasePath, _databaseName, _encrypt, _decrypt) {
    this[_tableCacheObject] = "cache_dio";
    this[_columnKey] = "key";
    this[_columnSubKey] = "subKey";
    this[_columnMaxAgeDate] = "max_age_date";
    this[_columnMaxStaleDate] = "max_stale_date";
    this[_columnContent] = "content";
    this[_columnStatusCode] = "statusCode";
    this[_columnHeaders] = "headers";
    this[_db] = null;
    this[_databasePath$] = _databasePath;
    this[_databaseName$] = _databaseName;
    this[_encrypt$] = _encrypt;
    this[_decrypt$] = _decrypt;
    store_disk.DiskCacheStore.__proto__.new.call(this);
    ;
  }).prototype = store_disk.DiskCacheStore.prototype;
  dart.addTypeTests(store_disk.DiskCacheStore);
  dart.addTypeCaches(store_disk.DiskCacheStore);
  dart.setMethodSignature(store_disk.DiskCacheStore, () => ({
    __proto__: dart.getMethods(store_disk.DiskCacheStore.__proto__),
    [_tryFixDbNoVersionBug]: dart.fnType(dart.dynamic, [dart.legacy(sqlite_api.Database), dart.legacy(core.String)]),
    [_getCreateTableSql]: dart.fnType(dart.dynamic, []),
    [_onCreate]: dart.fnType(dart.dynamic, [dart.legacy(sqlite_api.Database), dart.legacy(core.int)]),
    [_dbUpgradeList]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(core.String))))), []),
    [_onUpgrade]: dart.fnType(dart.dynamic, [dart.legacy(sqlite_api.Database), dart.legacy(core.int), dart.legacy(core.int)]),
    getCacheObj: dart.fnType(dart.legacy(async.Future$(dart.legacy(obj.CacheObj))), [dart.legacy(core.String)], {subKey: dart.legacy(core.String)}, {}),
    setCacheObj: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(obj.CacheObj)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String)], {subKey: dart.legacy(core.String)}, {}),
    clearExpired: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    [_clearExpired]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(sqlite_api.Database)]),
    clearAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    [_decryptCacheObj]: dart.fnType(dart.legacy(async.Future$(dart.legacy(obj.CacheObj))), [dart.legacy(obj.CacheObj)]),
    [_decryptCacheStr]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.int))))), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_encryptCacheStr]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.int))))), [dart.legacy(core.List$(dart.legacy(core.int)))])
  }));
  dart.setGetterSignature(store_disk.DiskCacheStore, () => ({
    __proto__: dart.getGetters(store_disk.DiskCacheStore.__proto__),
    [_database]: dart.legacy(async.Future$(dart.legacy(sqlite_api.Database)))
  }));
  dart.setLibraryUri(store_disk.DiskCacheStore, I[0]);
  dart.setFieldSignature(store_disk.DiskCacheStore, () => ({
    __proto__: dart.getFields(store_disk.DiskCacheStore.__proto__),
    [_databasePath$]: dart.finalFieldType(dart.legacy(core.String)),
    [_databaseName$]: dart.finalFieldType(dart.legacy(core.String)),
    [_encrypt$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.int))))), [dart.legacy(core.List$(dart.legacy(core.int)))]))),
    [_decrypt$]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.int))))), [dart.legacy(core.List$(dart.legacy(core.int)))]))),
    [_tableCacheObject]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnKey]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnSubKey]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnMaxAgeDate]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnMaxStaleDate]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnContent]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnStatusCode]: dart.finalFieldType(dart.legacy(core.String)),
    [_columnHeaders]: dart.finalFieldType(dart.legacy(core.String)),
    [_db]: dart.fieldType(dart.legacy(sqlite_api.Database))
  }));
  dart.defineLazy(store_disk.DiskCacheStore, {
    /*store_disk.DiskCacheStore._curDBVersion*/get _curDBVersion() {
      return 3;
    }
  }, true);
  dart.trackLibraries("packages/dio_http_cache/src/store/store_disk.dart", {
    "package:dio_http_cache/src/store/store_disk.dart": store_disk
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["store_disk.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../O:/packages/dio_http_cache/src/store/store_disk.dart.lib.js"}');
  // Exports:
  return {
    src__store__store_disk: store_disk
  };
}));

//# sourceMappingURL=store_disk.dart.lib.js.map
